<?xml version="1.0" ?>
<launch>

  <!-- Filename of the topological map. -->
  <arg name="file" default=""/>
  <!-- Pointset of the topological map (its name in the mongo database). --> 	
  <arg name="pointset" default=""/> 
  <!-- If false load a tmap2 using the map manager 2, else load a tmap using the legacy map manager. -->
  <arg name="legacy" default="false"/> 
  <!-- If true map manager 2 converts map to legacy format (default is true in map_manager2.py). -->
  <arg name="convert_to_legacy" default="true"/> 
  <!-- Load the map from its file rather than mongodb if using the legacy map manager (default is false in map_manager.py). -->
  <arg name="load_map_from_file" default="false" />

  <arg name="machine" default="localhost" />
  <arg name="user" default="" />

  <!-- If true then a node tagged as 'no_go' can be the closest node ONLY when the robot is within it (default is true in localisation.py). -->
  <arg name="localisation_with_tags" default="true" />

  <!-- The action being used for move_base -->
  <arg name="move_base_name" default="move_base"/>
  <!-- The planner being used by move_base. STRANDS systems tend to use DWAPlannerROS Jackal and HSR TrajectoryPlannerROS.  -->
  <arg name="move_base_planner" default="move_base/DWAPlannerROS"/>


  <machine name="$(arg machine)" address="$(arg machine)" env-loader="$(optenv ROS_ENV_LOADER )" user="$(arg user)" default="true"/>

  <node pkg="topological_navigation" type="map_manager.py" name="topological_map_manager" args="-f $(arg file)" respawn="true" if="$(eval arg('legacy') and arg('load_map_from_file'))"/>
  <node pkg="topological_navigation" type="map_manager.py" name="topological_map_manager" args="$(arg pointset)" respawn="true" if="$(eval arg('legacy') and not arg('load_map_from_file'))"/>

  <node pkg="topological_navigation" type="map_manager2.py" name="topological_map_manager" args="$(arg file)" respawn="true" unless="$(arg legacy)">
    <param name="convert_to_legacy" value="$(arg convert_to_legacy)"/>
  </node>

  <node pkg="fremenserver" type="fremenserver" name="fremenserver" respawn="true" if="$(eval arg('legacy') and not arg('load_map_from_file'))"/>

  <node pkg="topological_navigation" name="topological_localisation" type="localisation.py" output="screen" respawn="true"/>
	
  <node pkg="topological_navigation" name="topological_navigation" type="navigation.py" output="screen" respawn="true">
    <param name="move_base_name" type="str" value="$(arg move_base_name)"/>
    <param name="move_base_planner" type="str" value="$(arg move_base_planner)"/>
  </node>

  <node pkg="topological_navigation" type="navstats_loger.py" name="topological_navstats_logger" respawn="true" unless="$(arg load_map_from_file)"/>
		
  <node pkg="topological_navigation" type="visualise_map.py" name="visualise_map" args="$(arg map)" respawn="true" unless="$(arg load_map_from_file)"/>
  <node pkg="topological_navigation" type="visualise_map.py" name="visualise_map" args="$(arg map) -n" respawn="true" if="$(arg load_map_from_file)"/>
	
  <node pkg="topological_navigation" type="travel_time_estimator.py" name="travel_time_estimator" respawn="true" unless="$(arg load_map_from_file)"/>
  <node pkg="topological_navigation" type="topological_prediction.py" name="topological_prediction" output="screen" respawn="true" unless="$(arg load_map_from_file)"/>

</launch>
