<?xml version="1.0" ?>
<launch>

  <arg name="machine" default="localhost" />
  <arg name="user" default="" />

  <!-- ### TOPOLOGICAL MAP ARGS ### -->
  <!-- Filename of the topological map. -->
  <arg name="file" default=""/>
  <!-- Pointset of the topological map (its name in the mongo database). --> 	
  <arg name="pointset" default=""/> 
  <!-- If false load a tmap2 using the map manager 2, else load a tmap using the legacy map manager. -->
  <arg name="legacy" default="false"/> 
  <!-- If true map manager 2 converts tmap2 (topic: /topological_map_2) to legacy format (topic: /topological_map). -->
  <arg name="convert_to_legacy" default="true"/> 
  <!-- Load the map from its file rather than mongodb if using the legacy map manager. -->
  <arg name="load_map_from_file" default="false" />

  <!-- ### TOPOLOGICAL LOCALISATION ARGS ### -->
  <!-- Robot base frame. -->
  <arg name="base_frame" default="base_link" />
  <!-- Localisation publishes at max 10 hz. Lower the rate to every Nth message. -->
  <arg name="N" default="3" />
  <!-- If true localisation publishes only when the closest node/edge changes, and when the current node changes. -->
  <arg name="only_latched" default="true" />
  <!-- If true then a node tagged as 'no_go' can be the closest node ONLY when the robot is within it. -->
  <arg name="localisation_with_tags" default="true" />

  <!-- ### TOPOLOGICAL NAVIGATION ARGS ### -->
  <!-- The action being used for move_base -->
  <arg name="move_base_name" default="move_base"/>
  <!-- The planner being used by move_base. STRANDS systems tend to use DWAPlannerROS Jackal and HSR TrajectoryPlannerROS.  -->
  <arg name="move_base_planner" default="move_base/DWAPlannerROS"/>
  <!-- If the action of the first edge in the route is not in this list then the robot must nav to the exact pose of the closest node before following the route. -->
  <arg name="move_base_actions" default="['move_base','row_change','row_traversal']"/>
  <!-- Plan from destination node of closest edge if dist from closest edge <= max_dist_to_closest_edge else plan from closest node. -->
  <arg name="max_dist_to_closest_edge" default="1.0"/>
  <!-- If true reconfigure parameters according to the config of the current edge. -->
  <arg name="reconfigure_edges" default="false"/>
  <!-- If true do edge reconfigure using the server (as in legacy toponav) instead of using the settings in the map. -->
  <arg name="reconfigure_edges_srv" default="false"/>
  <!-- Edge reconfigure groups config file used if reconfigure_edges_srv is true. -->
  <arg name="edge_reconfigure_config" default="$(find topological_navigation/config/sample_edge_reconfig_groups.yaml"/>

  <!-- Needs mongodb. -->
  <arg name="log_nav_stats" default="false"/>


  <machine name="$(arg machine)" address="$(arg machine)" env-loader="$(optenv ROS_ENV_LOADER )" user="$(arg user)" default="true"/>

  <node pkg="topological_navigation" type="map_manager.py" name="topological_map_manager" args="-f $(arg file)" respawn="true" if="$(eval arg('legacy') and arg('load_map_from_file'))"/>
  <node pkg="topological_navigation" type="map_manager.py" name="topological_map_manager" args="$(arg pointset)" respawn="true" if="$(eval arg('legacy') and not arg('load_map_from_file'))"/>

  <node pkg="topological_navigation" type="map_manager2.py" name="topological_map_manager" args="$(arg file)" respawn="true" unless="$(arg legacy)">
    <param name="convert_to_legacy" value="$(arg convert_to_legacy)"/>
  </node>

  <node pkg="topological_navigation" name="topological_localisation" type="localisation.py" output="screen" respawn="true" if="$(arg localisation_with_tags)">
    <param name="base_frame" value="$(arg base_frame)"/>
    <param name="LocalisationThrottle" value="$(arg N)"/>
    <param name="OnlyLatched" value="$(arg only_latched)"/>
  </node>

  <node pkg="topological_navigation" name="topological_localisation" type="localisation.py" args="-notags" output="screen" respawn="true" unless="$(arg localisation_with_tags)">
    <param name="base_frame" value="$(arg base_frame)"/>
    <param name="LocalisationThrottle" value="$(arg N)"/>
    <param name="OnlyLatched" value="$(arg only_latched)"/>
  </node>

  <include file="$(find topological_navigation)/launch/reconf_at_edges_server.launch" if="$(eval arg('reconfigure_edges') and arg('reconfigure_edges_srv'))">
    <arg name="config" value="$(arg edge_reconfigure_config)" />
  </include>
	
  <node pkg="topological_navigation" name="topological_navigation" type="navigation.py" output="screen" respawn="true">
    <param name="move_base_name" type="str" value="$(arg move_base_name)"/>
    <param name="move_base_planner" type="str" value="$(arg move_base_planner)"/>
    <param name="max_dist_to_closest_edge" value="$(arg max_dist_to_closest_edge)"/>
    <param name="reconfigure_edges" value="$(arg reconfigure_edges)"/>
    <param name="reconfigure_edges_srv" value="$(arg reconfigure_edges_srv)"/>
    <rosparam param="move_base_actions" subst_value="True">$(arg move_base_actions)</rosparam>
  </node>

  <node pkg="topological_navigation" type="visualise_map.py" name="visualise_map" respawn="true"/>

  <node pkg="topological_navigation" type="navstats_logger.py" name="topological_navstats_logger" respawn="true" if="$(arg log_nav_stats)"/>

</launch>
